#!/usr/bin/python2
import os
import sys
path = os.path.dirname(os.path.realpath(__file__)) # current path
path += "/../src"
sys.path.append(path) # add library
from interfacetk import plotpyqt
get_interface = plotpyqt.get_interface



import matplotlib.pyplot as plt
import numpy as np
import matplotlib
matplotlib.rcParams.update({'font.size': 12})
matplotlib.rcParams['font.family'] = "Bitstream Vera Serif"



# get the label for the y axis
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--ylabel",default="XX")
parser.add_argument("--input",default="DYNAMICAL_CORRELATOR_MAP.OUT")
args = parser.parse_args() # get the arguments
name = args.input # input file
# define the ylabel
bra = "$\\langle GS |"
ket = "| GS \\rangle$"
delta = "\\delta (\\omega - H +E_0)"
if args.ylabel=="XX": ylabel = bra+"S^x_i"+delta+" S^x_j"+ket
elif args.ylabel=="YY": ylabel = bra+"S^y_i"+delta+" S^y_j"+ket
elif args.ylabel=="ZZ": ylabel = bra+"S^z_i"+delta+" S^z_j"+ket
else: raise




def funfig(obj):
    fig = plt.figure(obj.figure.number)
    
    
    fig.set_facecolor("white")
    
    
    m = np.genfromtxt(name).transpose()
    x = m[0]
    y = m[1]
    z = np.abs(m[2]+1j*m[3])
    
    # get dimensions assuming uniform grid
    
    nx = len(np.unique(x))
    ny = len(np.unique(y))
    
    
    print("Detected",nx,ny,"grid")
    
    Z = np.abs(z).reshape(nx,ny) # makes a (Zy,Zx) matrix out of z
    Z = z.reshape(nx,ny) # makes a (Zy,Zx) matrix out of z
    T = Z.T              # transposes the matrix (Zx,Zy)
    
    # now interpolate to get a smooth mesh
    from scipy.interpolate import interp2d
    x = np.linspace(0.,1.,nx)
    y = np.linspace(0.,1.,ny)
    xx, yy = np.meshgrid(x, y)
    f = interp2d(x, y, T, kind='linear')
    
    # 
    x = np.linspace(0.,1.,1000)
    ylim = obj.get_slider("maxy") 
    y = np.linspace(0.,1.,1000)*ylim
    
    z_inter = f(x,y)
    
    
    # now plot the data
    vmax = np.percentile(z_inter,95)
    vmax = np.max(np.abs(z_inter))*obj.get_slider("saturation")
    minx = np.min(m[0])
    maxx = np.max(m[0])
    miny = np.min(m[1])
    maxy = np.max(m[1])*ylim
    plt.imshow(z_inter, aspect='auto', origin='lower',cmap = plt.get_cmap("hot"), extent = ( minx, maxx, miny, maxy),interpolation='nearest',vmax=vmax)
    
    # set the colorbar
    cb = plt.colorbar(ticks=[0.,vmax])
    cb.ax.set_yticklabels([0, 'Max'])
    cb.set_label("Spectral function")
    plt.xlabel("Site")
    plt.title(ylabel)
    plt.ylabel("$\omega$ [J]")
    
    plt.tight_layout(h_pad=0.1,w_pad=0.1)
    fig.subplots_adjust(0.3,0.3)
    return fig

app,main = get_interface(funfig) # get the interface
#ks = np.linspace(1.0,3.0,50) # wavevectors
ps = np.linspace(0.0,1.0,100) # phases
#main.add_slider(label="Wavevector",key="k",vs=ks) # initialize the slider
main.add_slider(label="Saturation",key="saturation",vs=ps,v0=0.7) # initialize the slider
main.add_slider(label="Maximum energy",key="maxy",vs=ps,v0=0.7) # initialize the slider
#main.add_text(label="Shift",key="dy",text="0.0") # initialize the slider
# initialize the combobox
#main.add_combobox(["red","blue","black"],label="Color",key="c")
main.plot()
main.show()
sys.exit(app.exec_())
